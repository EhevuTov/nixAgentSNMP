/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef LINKTABLE_H
#define LINKTABLE_H

#ifdef __cplusplus
extern          "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

    /*
     * other required module components 
     */
    /* *INDENT-OFF*  */
config_add_mib(MYCORP-PRODUCT-MYPRODUCT-MIB)
config_require(MYCORP-PRODUCT-MYPRODUCT-MIB/linkTable/linkTable_interface)
config_require(MYCORP-PRODUCT-MYPRODUCT-MIB/linkTable/linkTable_data_access)
config_require(MYCORP-PRODUCT-MYPRODUCT-MIB/linkTable/linkTable_data_get)
config_require(MYCORP-PRODUCT-MYPRODUCT-MIB/linkTable/linkTable_data_set)
    /* *INDENT-ON*  */

    /*
     * OID and column number definitions for linkTable 
     */
#include "linkTable_oids.h"

    /*
     * enum definions 
     */
#include "linkTable_enums.h"

    /*
     *********************************************************************
     * function declarations
     */
    void            init_linkTable(void);
    void            shutdown_linkTable(void);

    /*
     *********************************************************************
     * Table declarations
     */
/**********************************************************************
 **********************************************************************
 ***
 *** Table linkTable
 ***
 **********************************************************************
 **********************************************************************/
    /*
     * MYCORP-PRODUCT-MYPRODUCT-MIB::linkTable is subid 1 of myCorpProductMIB.
     * Its status is Current.
     * OID: .1.3.6.1.4.1.36872.2.1.1.1, length: 11
     */
    /*
     *********************************************************************
     * When you register your mib, you get to provide a generic
     * pointer that will be passed back to you for most of the
     * functions calls.
     *
     * TODO:100:r: Review all context structures
     */
    /*
     * TODO:101:o: |-> Review linkTable registration context.
     */
    typedef netsnmp_data_list linkTable_registration;

/**********************************************************************/
    /*
     * TODO:110:r: |-> Review linkTable data context structure.
     * This structure is used to represent the data for linkTable.
     */
    /*
     * This structure contains storage for all the columns defined in the
     * linkTable.
     */
    typedef struct linkTable_data_s {

        /*
         * linkID(2)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          linkID;

        /*
         * slc(3)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          slc;

        /*
         * corSet(4)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          corSet;

        /*
         * txPort(5)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txPort;

        /*
         * txChan(6)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txChan;

        /*
         * txBran(7)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txBran;

        /*
         * txBrMgr(8)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txBrMgr;

        /*
         * corBrMgr(9)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          corBrMgr;

        /*
         * corBrCon(10)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          corBrCon;

        /*
         * protocol(11)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            protocol[255];
        size_t          protocol_len;   /* # of char elements, not bytes */

        /*
         * time(12)/TimeStamp/ASN_TIMETICKS/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          time;

        /*
         * txISUP(13)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txISUP;

        /*
         * rxISUP(14)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxISUP;

        /*
         * txSCCP(15)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txSCCP;

        /*
         * rxSCCP(16)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxSCCP;

        /*
         * txSNMM(17)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txSNMM;

        /*
         * rxSNMM(18)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxSNMM;

        /*
         * txFISU(19)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txFISU;

        /*
         * rxFISU(20)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxFISU;

        /*
         * txOther(21)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txOther;

        /*
         * rxOther(22)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxOther;

        /*
         * txErr(23)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txErr;

        /*
         * rxErr(24)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxErr;

        /*
         * txErrRate(25)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          txErrRate;

        /*
         * rxErrRate(26)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          rxErrRate;

        /*
         * unitID(27)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          unitID;

        /*
         * linkSet(28)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          linkSet;

        /*
         * originCLLI(29)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            originCLLI[255];
        size_t          originCLLI_len; /* # of char elements, not bytes */

        /*
         * destinCLLI(30)/DisplayString/ASN_OCTET_STR/char(char)//L/A/w/e/R/d/H
         */
        char            destinCLLI[255];
        size_t          destinCLLI_len; /* # of char elements, not bytes */

        /*
         * originPtCd(31)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          originPtCd;

        /*
         * destinPtCd(32)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/A/w/e/r/d/h
         */
        u_long          destinPtCd;

    } linkTable_data;


    /*
     * TODO:120:r: |-> Review linkTable mib index.
     * This structure is used to represent the index for linkTable.
     */
    typedef struct linkTable_mib_index_s {

        /*
         * linkIndex(1)/UNSIGNED32/ASN_UNSIGNED/u_long(u_long)//l/a/w/e/r/d/h
         */
        u_long          linkIndex;


    } linkTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review linkTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     */
#define MAX_linkTable_IDX_LEN     1


    /*
     *********************************************************************
     * TODO:130:o: |-> Review linkTable Row request (rowreq) context.
     * When your functions are called, you will be passed a
     * linkTable_rowreq_ctx pointer.
     */
    typedef struct linkTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
        netsnmp_index   oid_idx;
        oid             oid_tmp[MAX_linkTable_IDX_LEN];

        linkTable_mib_index tbl_idx;

        linkTable_data  data;

        /*
         * flags per row. Currently, the first (lower) 8 bits are reserved
         * for the user. See mfd.h for other flags.
         */
        u_int           rowreq_flags;

        /*
         * TODO:131:o: |   |-> Add useful data to linkTable rowreq context.
         */

        /*
         * storage for future expansion
         */
        netsnmp_data_list *linkTable_data_list;

    } linkTable_rowreq_ctx;

    typedef struct linkTable_ref_rowreq_ctx_s {
        linkTable_rowreq_ctx *rowreq_ctx;
    } linkTable_ref_rowreq_ctx;

    /*
     *********************************************************************
     * function prototypes
     */
    int             linkTable_pre_request(linkTable_registration *
                                          user_context);
    int             linkTable_post_request(linkTable_registration *
                                           user_context, int rc);


    linkTable_rowreq_ctx
        *linkTable_row_find_by_mib_index(linkTable_mib_index * mib_idx);

    extern const oid linkTable_oid[];
    extern const int linkTable_oid_size;


#include "linkTable_interface.h"
#include "linkTable_data_access.h"
#include "linkTable_data_get.h"
#include "linkTable_data_set.h"

    /*
     * DUMMY markers, ignore
     *
     * TODO:099:x: *************************************************************
     * TODO:199:x: *************************************************************
     * TODO:299:x: *************************************************************
     * TODO:399:x: *************************************************************
     * TODO:499:x: *************************************************************
     */

#ifdef __cplusplus
}
#endif
#endif                          /* LINKTABLE_H */
/** @} */
